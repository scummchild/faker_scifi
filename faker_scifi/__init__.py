# -*- coding: utf-8 -*-

from faker.providers import BaseProvider

# Based loosely on https://tvtropes.org/pmwiki/pmwiki.php/Main/TechnoBabble
class SciFi(BaseProvider):
    technobabble = (
        ('reverse',
         'increase',
         'absorb',
         'melt',
         'release',
         'short circuit',
         'calculate',
         'use',
         'bypass',
         'inject',
         'blow',
         'instantiate',
         'generate',
         'induce',
         'accelerate',
         'close',
         'modify',
         'disable',
         'heat',
         'enhance',
         'disengage',
         'run',
         'discharge',
         'power',
         'map',
         'distress',
         'invert',
         'probe',
         'adjust',
         'penetrate',
         'employ',
         'interpolate',
         'experience',
         'detect',
         'compensate',
         'analyze',
         'project',
         'sustain',
         'disrupt',
         'raise',
         'launch',
         'calibrate',
         'expend',
         'implement',
         'attach',
         'make operational',
         'shift',
         'store'),
        ('the',
         'a'),
        ('polarity of the'
         'spacial',
         'epithelial',
         'warp',
         'miniaturization',
         'molecular',
         'time-space',
         'space-time',
         'dimorphic',
         'life-sustaining',
         'submolecular',
         'quark',
         'pulse',
         'atomic'
         'flux',
         'reality',
         'dilithium',
         'crystalline',
         'distortion of the',
         'quantum',
         'heavy-ion',
         'narrow beam of',
         'nano',
         'external inertial',
         'tri-polymer',
         'chromodynamic',
         'infinite',
         'multi-dimensional',
         'black hole',
         'light speed',
         'theoretical',
         'virtual',
         'missing',
         'minor',
         'highly localized',
         'neutrino',
         'discrete',
         'electro-magnetic',
         'source of the',
         'upper',
         'result of the',
         'hyper',
         'sub-space',
         'diagnostic of the',
         'aggregate',
         'polarized',
         'concentration of',
         'inert',
         'radiated',
         'coherent',
         'utlization of the',
         'large quantities of the',
         'functional',
         'adaptive',
         'magnetospheric',
         'bioregenerative',
         'memory',
         'phased',
         'Heisenberg',
         'gravitational'
         'anti-',
         'double',
         'liquid',
         'turbo',
         'uncertainty'),
        ('flow',
         'linkage',
         'tissue',
         'core',
         'ray',
         'overloader',
         'coordinates',
         'system',
         'control',
         'grid',
         'parsecs',
         'inertia',
         'readings',
         'vortex',
         'energy',
         'wave',
         'emitters',
         'field',
         'radiation',
         'fusion',
         'dampener',
         'mainframe',
         'particles',
         'plasma',
         'module',
         'drive',
         'physics',
         'collision',
         'prototype',
         'space',
         'imaging',
         'data',
         'fluctuation',
         'anamoly',
         'phenomenon',
         'continuum',
         'patterns',
         'source',
         'emission',
         'whirlwinds',
         'signal',
         'atmosphere',
         'shield',
         'bursts',
         'reaction',
         'sensors',
         'interior',
         'output',
         'interference',
         'inverter',
         'trajectories',
         'ionization',
         'subprogram',
         'log',
         'coils',
         'disruption',
         'anomalies',
         'principle',
         'vector'))

    def babble(self):
        """
        :example 'reverse the polarity of the neutron flow'
        """
        result = []
        for phrase in self.technobabble:
            result.append(self.random_element(phrase))

        return " ".join(result)
